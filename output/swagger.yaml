openapi: 3.0.0
info:
  title: URx robot controller API docs
  description: API for the URx robot controller used in the IntellIoT project.
  contact:
    email: danai.vachtsevanou@unisg.ch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
- url: https://virtserver.swaggerhub.com/danaivach/robot-controller/1.0.1
  description: SwaggerHub API Auto Mocking
tags:
- name: Operator
  description: The operator of the robot controller.
- name: Robot
  description: The description related to the robot controller.
- name: Camera
  description: The camera related to the robot controller.
- name: Viewpoint
  description: The set viewpoint of the robot.
- name: ToolCenterPoint
  description: The tool center point of the robot.
- name: Clamp
  description: The clamp of the robot.
paths:
  /operator:
    get:
      tags:
      - Operator
      summary: Reads the operator.
      description: Reads the name and email of the operator of the robot controller.
      responses:
        "200":
          description: Operator read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
    post:
      tags:
      - Operator
      summary: Sets an operator.
      description: "Sets a new operator with a name and email address. Upon successful\
        \ registration, the response's header contains a \"Location\" tag with an\
        \ API key at the end. The API key can be used to gain access to the API of\
        \ the robot controller."
      requestBody:
        description: Operator to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operator'
        required: true
      responses:
        "200":
          description: Operator set successfully.
          headers:
            Location:
              description: "The location of the current operator, e.g. virtserver.swaggerhub.com/danaivach/robot/1.0.1/operator/6dc1e80c14edf749e2ceb86d98ea1ca1."
              style: simple
              explode: false
              schema:
                type: string
              example: virtserver.swaggerhub.com/danaivach/robot/1.0.1/operator/6dc1e80c14edf749e2ceb86d98ea1ca1
        "400":
          description: Invalid input parameter.
        "403":
          description: An operator is already set.
  /operator/{token}:
    delete:
      tags:
      - Operator
      summary: Removes the operator.
      description: Removes the operator specified by the token.
      parameters:
      - name: token
        in: path
        description: The operator token.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 6dc1e80c14edf749e2ceb86d98ea1ca1
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Operator successfully removed.
        "400":
          description: Invalid token; no operator is set with the specified token.
        "401":
          description: Unauthorized.
  /robot:
    get:
      tags:
      - Robot
      summary: Reads the robot handle.
      description: Reads the handle of the robot that is related to the robot controller.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Robot read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Handle'
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
  /camera:
    get:
      tags:
      - Camera
      summary: Reads the camera handle.
      description: Reads the handle of the camera that is related to the robot controller.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Camera read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Handle'
        "401":
          description: Unauthorized.
  /viewpoint:
    get:
      tags:
      - Viewpoint
      summary: Reads the viewpoint.
      description: Reads the target or current viewpoint of the robot.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Viewpoint read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Viewpoint'
        "401":
          description: Unauthorized.
    put:
      tags:
      - Viewpoint
      summary: Sets the viewpoint.
      description: Sets the target viewpoint of the robot.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      requestBody:
        description: The target viewpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Viewpoint'
        required: true
      responses:
        "202":
          description: The position has been accepted.
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
      callbacks:
        done:
          '{$request.body#/callback}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Done'
                required: true
              responses:
                "200":
                  description: Acknowledged.
                "400":
                  description: Invalid input parameter.
  /toolcenterpoint:
    get:
      tags:
      - ToolCenterPoint
      summary: Reads the tool center point.
      description: Reads the target or current position of the robot tool center point.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Tool center point read successfully.
          content:
            application/physical+json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
            application/logical+json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized.
    put:
      tags:
      - ToolCenterPoint
      summary: Sets the tool center point.
      description: Sets the target position of the robot tool center point.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      requestBody:
        description: The target physical or logical position and the callback location.
          The robot controller uses the callback location to send notifications about
          the progress of the request.
        content:
          application/physical+json:
            schema:
              $ref: '#/components/schemas/toolcenterpoint_body'
          application/logical+json:
            schema:
              $ref: '#/components/schemas/toolcenterpoint_body_1'
        required: true
      responses:
        "202":
          description: The physical/logical position has been accepted.
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
      callbacks:
        done:
          '{$request.body#/callback}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Done'
                required: true
              responses:
                "200":
                  description: Acknowledged.
                "400":
                  description: Invalid input parameter.
  /clamp:
    get:
      tags:
      - Clamp
      summary: Reads the clamp.
      description: Reads the status of the robot clamp.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Clamp read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clamp'
        "401":
          description: Unauthorized.
    put:
      tags:
      - Clamp
      summary: Sets the clamp.
      description: Sets the status of the robot clamp.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      requestBody:
        description: The target clamp status.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clamp'
        required: true
      responses:
        "200":
          description: Clamp status set successfully.
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
components:
  schemas:
    Security:
      type: string
      description: The operator token.
      example: 6dc1e80c14edf749e2ceb86d98ea1ca1
    Operator:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      example:
        name: Danai Vachtsevanou
        email: danai.vachtsevanou@unisg.ch
    Handle:
      required:
      - handle
      type: object
      properties:
        handle:
          type: string
      example:
        handle: https://virtserver.swaggerhub.com/danaivach/robot-controller/1.0.0
    Done:
      type: object
      properties:
        message:
          required:
          - message
          type: string
          example: Completed
          enum:
          - Completed
          - Aborted
    Viewpoint:
      required:
      - callback
      - position
      type: object
      properties:
        store:
          type: integer
          description: The store towards which the viewpoint is positioned and oriented.
          example: 0
          enum:
          - 0
          - 1
          - 2
          - 3
        callback:
          type: string
          description: The callback location passed to the robot controller. The robot
            controller will
          example: http://interactions.ics.unisg.ch/#me
    PhysicalPosition:
      required:
      - x
      - "y"
      - z
      type: object
      properties:
        x:
          type: number
          example: 0
        "y":
          type: number
          example: 0
        z:
          type: number
          example: 0
    LogicalPosition:
      type: string
      example: home
      enum:
      - home
      - engraver1
      - engraver2
    Clamp:
      type: object
      properties:
        status:
          type: string
          example: open
          enum:
          - open
          - close
    inline_response_200:
      required:
      - position
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PhysicalPosition'
    inline_response_200_1:
      required:
      - position
      type: object
      properties:
        position:
          $ref: '#/components/schemas/LogicalPosition'
    toolcenterpoint_body:
      required:
      - position
      type: object
      properties:
        position:
          $ref: '#/components/schemas/PhysicalPosition'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
    toolcenterpoint_body_1:
      required:
      - position
      type: object
      properties:
        position:
          $ref: '#/components/schemas/LogicalPosition'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
