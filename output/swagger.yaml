openapi: 3.0.0
info:
  title: URx robot controller API docs
  description: API for the URx robot controller used in the IntellIoT project.
  contact:
    email: danai.vachtsevanou@unisg.ch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.2
servers:
- url: https://virtserver.swaggerhub.com/danaivach/robot-controller/1.0.2
  description: SwaggerHub API Auto Mocking
tags:
- name: Operator
  description: The operator of the robot controller.
- name: Handle
  description: The handles related to the robot controller.
- name: Pose
  description: The pose of the robot.
- name: Gripper
  description: The gripper of the robot.
paths:
  /operator:
    get:
      tags:
      - Operator
      summary: Reads the operator.
      description: Reads the name and email of the operator of the robot controller.
      responses:
        "200":
          description: Operator read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorProfile'
    post:
      tags:
      - Operator
      summary: Sets an operator.
      description: "Sets a new operator with a name and email address. Upon successful\
        \ registration, the response's header contains a \"Location\" tag with an\
        \ API key at the end. The API key can be used to gain access to the API of\
        \ the robot controller."
      requestBody:
        description: Operator to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorProfile'
        required: true
      responses:
        "200":
          description: Operator set successfully.
          headers:
            Location:
              description: "The location of the current operator, e.g. virtserver.swaggerhub.com/danaivach/robot/1.0.1/operator/6dc1e80c14edf749e2ceb86d98ea1ca1."
              style: simple
              explode: false
              schema:
                type: string
              example: virtserver.swaggerhub.com/danaivach/robot/1.0.1/operator/6dc1e80c14edf749e2ceb86d98ea1ca1
        "400":
          description: Invalid input parameter.
        "403":
          description: An operator is already set.
  /operator/{token}:
    delete:
      tags:
      - Operator
      summary: Removes the operator.
      description: Removes the operator specified by the token.
      parameters:
      - name: token
        in: path
        description: The operator token.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 6dc1e80c14edf749e2ceb86d98ea1ca1
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Operator successfully removed.
        "400":
          description: Invalid token; no operator is set with the specified token.
        "401":
          description: Unauthorized.
  /handle:
    get:
      tags:
      - Handle
      summary: Reads the robot and camera handles.
      description: Reads the handles of the robot and the camera that are related
        to the robot controller.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Handles read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Handle'
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
  /pose:
    get:
      tags:
      - Pose
      summary: Reads the pose.
      description: Reads the target or current pose of the robot.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Pose read successfully.
          content:
            application/joint+json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
            application/tcp+json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
            application/logical+json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
            application/ai+json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "401":
          description: Unauthorized.
    put:
      tags:
      - Pose
      summary: Sets the pose.
      description: Sets the target pose of the robot.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      requestBody:
        description: "The target physical or logical position and the callback location.\
          \ The pose can be specified in different content types, i.e. application/joint+json,\
          \ application/tcp+json, application/logical+json, and application/ai+json.\
          \ The robot controller uses the callback location to send notifications\
          \ about the progress of the request."
        content:
          application/joint+json:
            schema:
              $ref: '#/components/schemas/pose_body'
          application/tcp+json:
            schema:
              $ref: '#/components/schemas/pose_body_1'
          application/logical+json:
            schema:
              $ref: '#/components/schemas/pose_body_2'
          application/ai+json:
            schema:
              $ref: '#/components/schemas/pose_body_3'
        required: true
      responses:
        "202":
          description: The physical/logical position has been accepted.
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
      callbacks:
        done:
          '{$request.body#/callback}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Done'
                required: true
              responses:
                "200":
                  description: Acknowledged.
                "400":
                  description: Invalid input parameter.
  /gripper:
    get:
      tags:
      - Gripper
      summary: Reads the gripper.
      description: Reads the status of the robot gripper.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      responses:
        "200":
          description: Gripper read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gripper'
        "401":
          description: Unauthorized.
    put:
      tags:
      - Gripper
      summary: Sets the gripper.
      description: Sets the status of the robot gripper.
      parameters:
      - name: X-API-KEY
        in: header
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Security'
      requestBody:
        description: The target gripper status.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gripper'
        required: true
      responses:
        "200":
          description: Gripper status set successfully.
        "400":
          description: Invalid input parameter.
        "401":
          description: Unauthorized.
components:
  schemas:
    Security:
      type: string
      description: The operator token.
      example: 6dc1e80c14edf749e2ceb86d98ea1ca1
    OperatorProfile:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      example:
        name: Danai Vachtsevanou
        email: danai.vachtsevanou@unisg.ch
    Handle:
      required:
      - camera
      - robot
      type: object
      properties:
        robot:
          type: string
        camera:
          type: string
      example:
        robot: https://virtserver.swaggerhub.com/danaivach/robot-controller/1.0.1
        camera: http://intelliot.camera.com/1.0.0
    Done:
      type: object
      properties:
        message:
          required:
          - message
          type: string
          enum:
          - completed
          - aborted
      example:
        message: completed
    JointCoordinates:
      required:
      - j1
      - j2
      - j3
      - j4
      - j5
      - j6
      type: object
      properties:
        j1:
          type: integer
        j2:
          type: integer
        j3:
          type: integer
        j4:
          type: integer
        j5:
          type: integer
        j6:
          type: integer
      example:
        j1: 0
        j2: 0
        j3: 0
        j4: 0
        j5: 0
        j6: 0
    TCPCoordinates:
      required:
      - alpha
      - beta
      - gamma
      - x
      - "y"
      - z
      type: object
      properties:
        x:
          type: integer
        "y":
          type: integer
        z:
          type: integer
        alpha:
          type: integer
        beta:
          type: integer
        gamma:
          type: integer
      example:
        x: 0
        "y": 0
        z: 0
        alpha: 0
        beta: 0
        gamma: 0
    LogicalPosition:
      type: string
      example: milling_machine_viewpoint
      enum:
      - home
      - milling_machine_viewpoint
      - storage_viewpoint
    AICoordinates:
      required:
      - alpha
      - x
      - "y"
      type: object
      properties:
        x:
          type: integer
        "y":
          type: integer
        alpha:
          type: integer
      example:
        x: 0
        "y": 0
        z: 0
    Gripper:
      type: object
      properties:
        status:
          type: string
          enum:
          - open
          - close
      example:
        status: open
    inline_response_200:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/JointCoordinates'
    inline_response_200_1:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/TCPCoordinates'
    inline_response_200_2:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/LogicalPosition'
    inline_response_200_3:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/AICoordinates'
    pose_body:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/JointCoordinates'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
    pose_body_1:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/TCPCoordinates'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
    pose_body_2:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/LogicalPosition'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
    pose_body_3:
      required:
      - value
      type: object
      properties:
        value:
          $ref: '#/components/schemas/AICoordinates'
        callback:
          type: string
          example: http://interactions.ics.unisg.ch/#me
